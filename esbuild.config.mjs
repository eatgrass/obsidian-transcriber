import esbuild from 'esbuild'
import process from 'process'
import builtins from 'builtin-modules'
import esbuildSvelte from 'esbuild-svelte'
import sveltePreprocess from 'svelte-preprocess'
import findCacheDir from 'find-cache-dir'
import * as fs from 'fs'
import * as path from 'path'

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`

const prod = process.argv[2] === 'production'

let cacheDir = findCacheDir({
    name: 'inline-sevice-worker',
    create: true,
})

async function buildWorker(workerPath) {
    let scriptNameParts = path.basename(workerPath).split('.')
    scriptNameParts.pop()
    scriptNameParts.push('js')
    let scriptName = scriptNameParts.join('.')
    let bundlePath = path.resolve(cacheDir, scriptName)

    await esbuild.build({
        entryPoints: [workerPath],
        bundle: true,
        minify: true,
        outfile: bundlePath,
        target: 'es2021',
        format: 'cjs',
    })

    return fs.promises.readFile(bundlePath, { encoding: 'utf-8' })
}
let inlineWorkerPlugin = {
    name: 'inline-worker-plugin',
    setup(build) {
        build.onLoad(
            { filter: /\.(service|worker).(js|jsx|ts|tsx)$/ },
            async ({ path: workerPath }) => {
                let workerCode = await buildWorker(workerPath)
                return {
                    contents: `
                export default function inlineWorker() {
                    let blob = new Blob([${JSON.stringify(workerCode)}])
                    let url = URL.createObjectURL(blob)
                    let worker = ${
                        workerPath.includes('service')
                            ? "navigator.serviceWorker.register(url, {scope: '/'})"
                            : 'new Worker(url)'
                    };
                    URL.revokeObjectURL(url)
                    return worker
                }`,
                    loader: 'js',
                }
            },
        )
    },
}
const context = await esbuild.context({
    banner: {
        js: banner,
    },
    entryPoints: ['src/main.ts'],
    bundle: true,
    plugins: [
        inlineWorkerPlugin,
        esbuildSvelte({
            compilerOptions: { css: 'injected' },
            preprocess: sveltePreprocess(),
        }),
    ],
    external: [
        'obsidian',
        'electron',
        '@codemirror/autocomplete',
        '@codemirror/collab',
        '@codemirror/commands',
        '@codemirror/language',
        '@codemirror/lint',
        '@codemirror/search',
        '@codemirror/state',
        '@codemirror/view',
        '@lezer/common',
        '@lezer/highlight',
        '@lezer/lr',
        ...builtins,
    ],
    format: 'cjs',
    target: 'es2021',
    logLevel: 'info',
    sourcemap: prod ? false : 'inline',
    treeShaking: true,
    outfile: 'main.js',
})

if (prod) {
    await context.rebuild()
    process.exit(0)
} else {
    await context.watch()
}
